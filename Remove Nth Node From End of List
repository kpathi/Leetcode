Given a linked list, remove the n-th node from the end of list and return its head.

Example:

Given linked list: 1->2->3->4->5, and n = 2.

After removing the second node from the end, the linked list becomes 1->2->3->5.
Note:

Given n will always be valid.

Follow up:

Could you do this in one pass?


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        int count=1;
        ListNode p= head;
        if(p.next==null && n==1){
            return p.next;
        }
        while(p.next!=null){
            p=p.next;
        count=count+1;
           //return count;
        }
        count=count-n;
       if(count==0){
           return head.next;
       }
        p=head;
        for(int i=1; i<count; i++){
            p=p.next;
        
        }
        p.next=p.next.next;
        return head;
    }
}
