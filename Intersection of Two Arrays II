Given two arrays, write a function to compute their intersection.

Example:
Given nums1 = [1, 2, 2, 1], nums2 = [2, 2], return [2, 2].

Note:
Each element in the result should appear as many times as it shows in both arrays.
The result can be in any order.
/********** follow up 1:What if the given array is already sorted? How would you optimize your algorithm?***/
class Solution {
    public int[] intersect(int[] nums1, int[] nums2) {
        Arrays.sort(nums1);
        Arrays.sort(nums2);
        int[] res = new int[Math.min(nums1.length,nums2.length)];
        int i=0,j=0,k=0;
 
        while(i<nums1.length && j<nums2.length){
            if(nums1[i]==nums2[j]){
                res[k]= nums1[i];
                i++; j++; k++;
            }
            else if(nums1[i]<nums2[j]){
                i++;
            }
            else j++;
        } return Arrays.copyOfRange(res,0,k);
    }
}
    
/**** follow up 2: What if nums1's size is small compared to nums2's size? Which algorithm is better?***/

class Solution {
    public int[] intersect(int[] nums1, int[] nums2) {
        Map<Integer,Integer> map = new HashMap<>();
        List<Integer> l = new ArrayList<>();
        for(int i: nums1){
            if(map.containsKey(i)){
                map.put(i, map.get(i)+1);
            }
            else map.put(i,1);
        }
         
        for(int j: nums2){
            if(map.containsKey(j) && map.get(j)>0){
                l.add(j);
                map.put(j,map.get(j)-1);
            }
        }
        
        int[] res= new int[l.size()];
        for(int k=0; k<l.size(); k++){
            res[k]=l.get(k);
        }
        return res;
    }
}
    
